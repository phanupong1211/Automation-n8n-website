{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/User/Documents/augment-projects/BoomBigNose-portfolio/src/app/api/public/n8n/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\n\n// Completely open endpoint for n8n - no authentication required\nexport async function POST(request: NextRequest) {\n  try {\n    console.log(\"=== n8n Public Endpoint Called ===\");\n    console.log(\"Headers:\", Object.fromEntries(request.headers.entries()));\n    \n    const body = await request.json();\n    console.log(\"Body received:\", body);\n\n    // Extract response from various possible formats\n    const response = body.response || body.message || body.reply || body.text || body.content || \"‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å n8n\";\n    \n    console.log(\"Processed response:\", response);\n\n    // Return success response\n    return NextResponse.json({ \n      success: true, \n      message: \"‚úÖ Response received successfully from n8n\",\n      processedResponse: response,\n      timestamp: new Date().toISOString(),\n      receivedData: body\n    }, {\n      status: 200,\n      headers: {\n        'Access-Control-Allow-Origin': '*',\n        'Access-Control-Allow-Methods': 'POST, GET, OPTIONS',\n        'Access-Control-Allow-Headers': 'Content-Type',\n      }\n    });\n\n  } catch (error) {\n    console.error(\"‚ùå n8n public endpoint error:\", error);\n    return NextResponse.json(\n      { \n        success: false,\n        error: \"Failed to process n8n response\",\n        details: error instanceof Error ? error.message : \"Unknown error\",\n        timestamp: new Date().toISOString()\n      },\n      { status: 500 }\n    );\n  }\n}\n\n// Handle OPTIONS for CORS\nexport async function OPTIONS() {\n  return new NextResponse(null, {\n    status: 200,\n    headers: {\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Methods': 'POST, GET, OPTIONS',\n      'Access-Control-Allow-Headers': 'Content-Type',\n    },\n  });\n}\n\n// GET endpoint to check if the service is running\nexport async function GET() {\n  return NextResponse.json({\n    status: \"üü¢ ACTIVE\",\n    message: \"n8n public endpoint is running - NO AUTHENTICATION REQUIRED\",\n    timestamp: new Date().toISOString(),\n    endpoint: \"/api/public/n8n\",\n    methods: [\"POST\", \"GET\", \"OPTIONS\"],\n    example: {\n      url: \"http://localhost:3000/api/public/n8n\",\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: {\n        response: \"Your AI response here\",\n        sessionId: \"optional-session-id\"\n      }\n    }\n  });\n}\n"],"names":[],"mappings":";;;;;AAAA;;AAGO,eAAe,KAAK,OAAoB;IAC7C,IAAI;QACF,QAAQ,GAAG,CAAC;QACZ,QAAQ,GAAG,CAAC,YAAY,OAAO,WAAW,CAAC,QAAQ,OAAO,CAAC,OAAO;QAElE,MAAM,OAAO,MAAM,QAAQ,IAAI;QAC/B,QAAQ,GAAG,CAAC,kBAAkB;QAE9B,iDAAiD;QACjD,MAAM,WAAW,KAAK,QAAQ,IAAI,KAAK,OAAO,IAAI,KAAK,KAAK,IAAI,KAAK,IAAI,IAAI,KAAK,OAAO,IAAI;QAE7F,QAAQ,GAAG,CAAC,uBAAuB;QAEnC,0BAA0B;QAC1B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,SAAS;YACT,mBAAmB;YACnB,WAAW,IAAI,OAAO,WAAW;YACjC,cAAc;QAChB,GAAG;YACD,QAAQ;YACR,SAAS;gBACP,+BAA+B;gBAC/B,gCAAgC;gBAChC,gCAAgC;YAClC;QACF;IAEF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,gCAAgC;QAC9C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YACE,SAAS;YACT,OAAO;YACP,SAAS,iBAAiB,QAAQ,MAAM,OAAO,GAAG;YAClD,WAAW,IAAI,OAAO,WAAW;QACnC,GACA;YAAE,QAAQ;QAAI;IAElB;AACF;AAGO,eAAe;IACpB,OAAO,IAAI,gIAAA,CAAA,eAAY,CAAC,MAAM;QAC5B,QAAQ;QACR,SAAS;YACP,+BAA+B;YAC/B,gCAAgC;YAChC,gCAAgC;QAClC;IACF;AACF;AAGO,eAAe;IACpB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;QACvB,QAAQ;QACR,SAAS;QACT,WAAW,IAAI,OAAO,WAAW;QACjC,UAAU;QACV,SAAS;YAAC;YAAQ;YAAO;SAAU;QACnC,SAAS;YACP,KAAK;YACL,QAAQ;YACR,SAAS;gBACP,gBAAgB;YAClB;YACA,MAAM;gBACJ,UAAU;gBACV,WAAW;YACb;QACF;IACF;AACF","debugId":null}}]
}