{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/phanu/Automation-n8n%2Bwebiste/Automation-n8n%2Bwebiste/src/app/api/sse/route.ts"],"sourcesContent":["//sse\nimport { NextRequest } from \"next/server\";\n\n// Store for SSE connections\nconst connections = new Map<string, ReadableStreamDefaultController>();\n\nexport async function GET(request: NextRequest) {\n  try {\n    const { searchParams } = new URL(request.url);\n    const sessionId = searchParams.get('sessionId') || Date.now().toString();\n\n    console.log(`SSE connection established for session: ${sessionId}`);\n\n    const stream = new ReadableStream({\n      start(controller) {\n        try {\n          // Store the connection\n          connections.set(sessionId, controller);\n\n          // Send initial connection message\n          controller.enqueue(`data: ${JSON.stringify({\n            type: 'connected',\n            sessionId,\n            message: 'เชื่อมต่อ AI สำเร็จ'\n          })}\\n\\n`);\n\n          console.log(`SSE initial message sent for session: ${sessionId}`);\n\n          // Clean up on close\n          request.signal.addEventListener('abort', () => {\n            console.log(`SSE connection closed for session: ${sessionId}`);\n            connections.delete(sessionId);\n            try {\n              controller.close();\n            } catch (e) {\n              // Connection already closed\n            }\n          });\n        } catch (error) {\n          console.error('Error in SSE stream start:', error);\n          connections.delete(sessionId);\n        }\n      },\n    });\n\n    return new Response(stream, {\n      headers: {\n        'Content-Type': 'text/event-stream',\n        'Cache-Control': 'no-cache',\n        'Connection': 'keep-alive',\n        'Access-Control-Allow-Origin': '*',\n        'Access-Control-Allow-Methods': 'GET',\n        'Access-Control-Allow-Headers': 'Cache-Control',\n        'X-Accel-Buffering': 'no', // Disable nginx buffering\n      },\n    });\n  } catch (error) {\n    console.error('Error in SSE GET handler:', error);\n    return new Response('SSE Error', { status: 500 });\n  }\n}\n\n// Function to send message to specific session\nexport function sendToSession(sessionId: string, data: any) {\n  console.log(`[SSE] Attempting to send to session: ${sessionId}`);\n  console.log(`[SSE] Available connections:`, Array.from(connections.keys()));\n  console.log(`[SSE] Total connections: ${connections.size}`);\n\n  const controller = connections.get(sessionId);\n  if (controller) {\n    try {\n      controller.enqueue(`data: ${JSON.stringify(data)}\\n\\n`);\n      console.log(`[SSE] Successfully sent message to session: ${sessionId}`);\n      return true;\n    } catch (error) {\n      console.error(`[SSE] Error sending to session ${sessionId}:`, error);\n      connections.delete(sessionId);\n      return false;\n    }\n  } else {\n    console.log(`[SSE] No connection found for session: ${sessionId}`);\n    console.log(`[SSE] Searching for partial matches...`);\n\n    // Try to find partial matches in case of session ID mismatch\n    for (const [connId, controller] of connections.entries()) {\n      if (connId.includes(sessionId) || sessionId.includes(connId)) {\n        console.log(`[SSE] Found partial match: ${connId} for ${sessionId}`);\n        try {\n          controller.enqueue(`data: ${JSON.stringify(data)}\\n\\n`);\n          console.log(`[SSE] Successfully sent message to partial match: ${connId}`);\n          return true;\n        } catch (error) {\n          console.error(`[SSE] Error sending to partial match ${connId}:`, error);\n          connections.delete(connId);\n        }\n      }\n    }\n  }\n  return false;\n}\n\n// Function to broadcast to all connections\nexport function broadcast(data: any) {\n  let sent = 0;\n  for (const [sessionId, controller] of connections.entries()) {\n    try {\n      controller.enqueue(`data: ${JSON.stringify(data)}\\n\\n`);\n      sent++;\n    } catch (error) {\n      console.error('Error broadcasting to session:', sessionId, error);\n      connections.delete(sessionId);\n    }\n  }\n  return sent;\n}\n\n// Function to get connection info for debugging\nexport function getConnectionInfo() {\n  return {\n    totalConnections: connections.size,\n    sessionIds: Array.from(connections.keys())\n  };\n}\n\n// Add a POST endpoint for debugging SSE connections\nexport async function POST(request: NextRequest) {\n  try {\n    const body = await request.json();\n    const { action, sessionId, testData } = body;\n\n    if (action === 'debug') {\n      const info = getConnectionInfo();\n      console.log(`[SSE Debug] Connection info:`, info);\n      return new Response(JSON.stringify({\n        success: true,\n        connectionInfo: info,\n        timestamp: new Date().toISOString()\n      }), {\n        headers: { 'Content-Type': 'application/json' }\n      });\n    }\n\n    if (action === 'test' && sessionId) {\n      const testMessage = testData || { type: 'test', message: 'Test message from debug endpoint' };\n      const sent = sendToSession(sessionId, testMessage);\n      return new Response(JSON.stringify({\n        success: sent,\n        message: sent ? 'Test message sent successfully' : 'Failed to send test message',\n        sessionId,\n        connectionInfo: getConnectionInfo()\n      }), {\n        headers: { 'Content-Type': 'application/json' }\n      });\n    }\n\n    return new Response(JSON.stringify({\n      error: 'Invalid action. Use \"debug\" or \"test\"'\n    }), {\n      status: 400,\n      headers: { 'Content-Type': 'application/json' }\n    });\n\n  } catch (error) {\n    console.error('SSE POST error:', error);\n    return new Response(JSON.stringify({\n      error: 'Failed to process request'\n    }), {\n      status: 500,\n      headers: { 'Content-Type': 'application/json' }\n    });\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 235, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/phanu/Automation-n8n%2Bwebiste/Automation-n8n%2Bwebiste/src/app/api/public/n8n/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\nimport { sendToSession, getConnectionInfo } from \"../../sse/route\";\n\n// Completely open endpoint for n8n - no authentication required\nexport async function POST(request: NextRequest) {\n  try {\n    console.log(\"=== n8n Public Endpoint Called ===\");\n    console.log(\"Headers:\", Object.fromEntries(request.headers.entries()));\n\n    const body = await request.json();\n    console.log(\"Body received:\", body);\n\n    // Extract response from various possible formats\n    const response = body.response || body.message || body.reply || body.text || body.content || \"ข้อความจาก n8n\";\n    const sessionId = body.sessionId || body.chatId || body.conversationId;\n\n    console.log(\"Processed response:\", response);\n    console.log(\"Session ID:\", sessionId);\n    console.log(\"SSE Connection Info:\", getConnectionInfo());\n\n    // Send the response via SSE to the chat if we have a session ID\n    if (sessionId) {\n      const sent = sendToSession(sessionId, {\n        type: 'response',\n        message: response,\n        timestamp: new Date().toISOString()\n      });\n      console.log(`✅ SSE message sent to session ${sessionId}:`, sent);\n\n      if (sent) {\n        return NextResponse.json({\n          success: true,\n          message: \"✅ Response sent to chat via SSE\",\n          sessionId: sessionId,\n          processedResponse: response,\n          timestamp: new Date().toISOString()\n        }, {\n          status: 200,\n          headers: {\n            'Access-Control-Allow-Origin': '*',\n            'Access-Control-Allow-Methods': 'POST, GET, OPTIONS',\n            'Access-Control-Allow-Headers': 'Content-Type',\n          }\n        });\n      } else {\n        console.log(`❌ Failed to send SSE message to session ${sessionId}`);\n      }\n    } else {\n      console.log(\"❌ No session ID found in request\");\n    }\n\n    // Return success response (fallback)\n    return NextResponse.json({\n      success: true,\n      message: \"✅ Response received successfully from n8n\",\n      processedResponse: response,\n      timestamp: new Date().toISOString(),\n      receivedData: body\n    }, {\n      status: 200,\n      headers: {\n        'Access-Control-Allow-Origin': '*',\n        'Access-Control-Allow-Methods': 'POST, GET, OPTIONS',\n        'Access-Control-Allow-Headers': 'Content-Type',\n      }\n    });\n\n  } catch (error) {\n    console.error(\"❌ n8n public endpoint error:\", error);\n    return NextResponse.json(\n      {\n        success: false,\n        error: \"Failed to process n8n response\",\n        details: error instanceof Error ? error.message : \"Unknown error\",\n        timestamp: new Date().toISOString()\n      },\n      { status: 500 }\n    );\n  }\n}\n\n// Handle OPTIONS for CORS\nexport async function OPTIONS() {\n  return new NextResponse(null, {\n    status: 200,\n    headers: {\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Methods': 'POST, GET, OPTIONS',\n      'Access-Control-Allow-Headers': 'Content-Type',\n    },\n  });\n}\n\n// GET endpoint to check if the service is running\nexport async function GET() {\n  return NextResponse.json({\n    status: \"🟢 ACTIVE\",\n    message: \"n8n public endpoint is running - NO AUTHENTICATION REQUIRED\",\n    timestamp: new Date().toISOString(),\n    endpoint: \"/api/public/n8n\",\n    methods: [\"POST\", \"GET\", \"OPTIONS\"],\n    example: {\n      url: \"http://localhost:3000/api/public/n8n\",\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: {\n        response: \"Your AI response here\",\n        sessionId: \"optional-session-id\"\n      }\n    }\n  });\n}\n"],"names":[],"mappings":";;;;;AAAA;AACA;;;AAGO,eAAe,KAAK,OAAoB;IAC7C,IAAI;QACF,QAAQ,GAAG,CAAC;QACZ,QAAQ,GAAG,CAAC,YAAY,OAAO,WAAW,CAAC,QAAQ,OAAO,CAAC,OAAO;QAElE,MAAM,OAAO,MAAM,QAAQ,IAAI;QAC/B,QAAQ,GAAG,CAAC,kBAAkB;QAE9B,iDAAiD;QACjD,MAAM,WAAW,KAAK,QAAQ,IAAI,KAAK,OAAO,IAAI,KAAK,KAAK,IAAI,KAAK,IAAI,IAAI,KAAK,OAAO,IAAI;QAC7F,MAAM,YAAY,KAAK,SAAS,IAAI,KAAK,MAAM,IAAI,KAAK,cAAc;QAEtE,QAAQ,GAAG,CAAC,uBAAuB;QACnC,QAAQ,GAAG,CAAC,eAAe;QAC3B,QAAQ,GAAG,CAAC,wBAAwB,CAAA,GAAA,mIAAA,CAAA,oBAAiB,AAAD;QAEpD,gEAAgE;QAChE,IAAI,WAAW;YACb,MAAM,OAAO,CAAA,GAAA,mIAAA,CAAA,gBAAa,AAAD,EAAE,WAAW;gBACpC,MAAM;gBACN,SAAS;gBACT,WAAW,IAAI,OAAO,WAAW;YACnC;YACA,QAAQ,GAAG,CAAC,CAAC,8BAA8B,EAAE,UAAU,CAAC,CAAC,EAAE;YAE3D,IAAI,MAAM;gBACR,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;oBACvB,SAAS;oBACT,SAAS;oBACT,WAAW;oBACX,mBAAmB;oBACnB,WAAW,IAAI,OAAO,WAAW;gBACnC,GAAG;oBACD,QAAQ;oBACR,SAAS;wBACP,+BAA+B;wBAC/B,gCAAgC;wBAChC,gCAAgC;oBAClC;gBACF;YACF,OAAO;gBACL,QAAQ,GAAG,CAAC,CAAC,wCAAwC,EAAE,WAAW;YACpE;QACF,OAAO;YACL,QAAQ,GAAG,CAAC;QACd;QAEA,qCAAqC;QACrC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,SAAS;YACT,mBAAmB;YACnB,WAAW,IAAI,OAAO,WAAW;YACjC,cAAc;QAChB,GAAG;YACD,QAAQ;YACR,SAAS;gBACP,+BAA+B;gBAC/B,gCAAgC;gBAChC,gCAAgC;YAClC;QACF;IAEF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,gCAAgC;QAC9C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YACE,SAAS;YACT,OAAO;YACP,SAAS,iBAAiB,QAAQ,MAAM,OAAO,GAAG;YAClD,WAAW,IAAI,OAAO,WAAW;QACnC,GACA;YAAE,QAAQ;QAAI;IAElB;AACF;AAGO,eAAe;IACpB,OAAO,IAAI,gIAAA,CAAA,eAAY,CAAC,MAAM;QAC5B,QAAQ;QACR,SAAS;YACP,+BAA+B;YAC/B,gCAAgC;YAChC,gCAAgC;QAClC;IACF;AACF;AAGO,eAAe;IACpB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;QACvB,QAAQ;QACR,SAAS;QACT,WAAW,IAAI,OAAO,WAAW;QACjC,UAAU;QACV,SAAS;YAAC;YAAQ;YAAO;SAAU;QACnC,SAAS;YACP,KAAK;YACL,QAAQ;YACR,SAAS;gBACP,gBAAgB;YAClB;YACA,MAAM;gBACJ,UAAU;gBACV,WAAW;YACb;QACF;IACF;AACF","debugId":null}}]
}