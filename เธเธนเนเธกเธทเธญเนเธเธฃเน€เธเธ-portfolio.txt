===============================================================================
                    คู่มือโปรเจค BoomBigNose Portfolio
                    เวอร์ชัน 1.0 - สำหรับผู้เริ่มต้น
===============================================================================

📋 สารบัญ
1. ภาพรวมโปรเจค
2. สิ่งที่ต้องรู้ก่อนเริ่มต้น
3. การติดตั้งและเตรียมความพร้อม
4. โครงสร้างโฟลเดอร์แบบละเอียด
5. การจัดระเบียบหน้าเว็บ
6. เอกสาร API และการดึงข้อมูล
7. ประเภทไฟล์และหน้าที่
8. โครงสร้าง React Components
9. ระบบการนำทาง (Routing)
10. วิธีการจัดการ CSS/Styling
11. ไฟล์การตั้งค่า (Configuration Files)
12. คู่มือเริ่มต้นสำหรับผู้เริ่มต้น
13. การแก้ไขและปรับแต่งเนื้อหา
14. การเพิ่มฟีเจอร์ใหม่
15. การแก้ไขปัญหาที่พบบ่อย
16. คำศัพท์และความหมาย
17. แหล่งเรียนรู้เพิ่มเติม

===============================================================================
1. 📖 ภาพรวมโปรเจค
===============================================================================

โปรเจคนี้เป็นเว็บไซต์ Portfolio ส่วนตัวของ Vittawat Sootawee (BoomBigNose) 
ที่สร้างด้วย Next.js 15 และ React 19

🎯 วัตถุประสงค์หลัก:
- แสดงผลงาน ประสบการณ์ และทักษะ
- ขายคอร์สเรียนและบริการที่ปรึกษา
- แนะนำคอร์สเรียนจากแพลตฟอร์มอื่น (Affiliate)
- ให้บริการแชทบอทสำหรับตอบคำถาม

🛠️ เทคโนโลยีที่ใช้:
- Next.js 15 (React Framework)
- TypeScript (ภาษาโปรแกรม)
- Tailwind CSS (CSS Framework)
- Framer Motion (Animation)
- Lucide React (Icons)

===============================================================================
2. � สิ่งที่ต้องรู้ก่อนเริ่มต้น
===============================================================================

🎯 ความรู้พื้นฐานที่ควรมี:

💻 ความรู้คอมพิวเตอร์พื้นฐาน:
- การใช้งาน Command Line/Terminal เบื้องต้น
- การจัดการไฟล์และโฟลเดอร์
- การใช้งาน Text Editor (แนะนำ VS Code)

🌐 ความรู้เว็บพื้นฐาน:
- HTML: โครงสร้างหน้าเว็บ
- CSS: การจัดแต่งหน้าตา
- JavaScript: การทำงานแบบ interactive

⚛️ ความรู้ React พื้นฐาน:
- Component คืออะไร
- Props และ State
- JSX syntax

🔧 เครื่องมือที่ต้องติดตั้ง:
- Node.js (เวอร์ชัน 18 ขึ้นไป)
- npm หรือ yarn (Package Manager)
- Git (Version Control)
- VS Code (Text Editor)

💡 หมายเหตุ: หากยังไม่มีความรู้เหล่านี้ ไม่ต้องกังวล!
คู่มือนี้จะอธิบายทุกอย่างแบบละเอียด

===============================================================================
3. 🛠️ การติดตั้งและเตรียมความพร้อม
===============================================================================

📥 ขั้นตอนการติดตั้ง:

1️⃣ ติดตั้ง Node.js
- ไปที่ https://nodejs.org
- ดาวน์โหลดเวอร์ชัน LTS (Long Term Support)
- ติดตั้งตามขั้นตอน
- ตรวจสอบการติดตั้ง: เปิด Terminal แล้วพิมพ์
  ```
  node --version
  npm --version
  ```

2️⃣ ติดตั้ง VS Code
- ไปที่ https://code.visualstudio.com
- ดาวน์โหลดและติดตั้ง
- ติดตั้ง Extensions ที่แนะนำ:
  - ES7+ React/Redux/React-Native snippets
  - Tailwind CSS IntelliSense
  - TypeScript Importer
  - Prettier - Code formatter
  - Auto Rename Tag

3️⃣ ติดตั้ง Git
- ไปที่ https://git-scm.com
- ดาวน์โหลดและติดตั้ง
- ตั้งค่าข้อมูลผู้ใช้:
  ```
  git config --global user.name "ชื่อของคุณ"
  git config --global user.email "email@example.com"
  ```

4️⃣ Clone โปรเจค
```
git clone https://github.com/Boom-Vitt/BoomBigNose-portfolio.git
cd BoomBigNose-portfolio
```

5️⃣ ติดตั้ง Dependencies
```
npm install
```

6️⃣ รันโปรเจค
```
npm run dev
```

7️⃣ เปิดเบราว์เซอร์
- ไปที่ http://localhost:3000
- ถ้าเห็นเว็บไซต์แสดงว่าสำเร็จ!

===============================================================================
4. �📁 โครงสร้างโฟลเดอร์แบบละเอียด
===============================================================================

BoomBigNose-portfolio/
├── 📁 src/                          # โฟลเดอร์ซอร์สโค้ดหลัก
│   ├── 📁 app/                      # โฟลเดอร์หน้าเว็บ (App Router)
│   │   ├── 📁 api/                  # API Endpoints - ระบบ Backend
│   │   │   ├── 📁 analytics/        # ติดตามการใช้งาน (Google Analytics)
│   │   │   │   └── 📄 route.ts      # API สำหรับบันทึกการคลิก
│   │   │   ├── 📁 chat/            # ระบบแชทบอท
│   │   │   │   └── 📄 route.ts      # API สำหรับส่งข้อความ
│   │   │   ├── 📁 n8n-response/    # การตอบสนองจาก n8n
│   │   │   │   └── 📄 route.ts      # รับคำตอบจาก AI
│   │   │   ├── 📁 public/          # ไฟล์สาธารณะ API
│   │   │   │   └── 📁 n8n/         # Webhook สำหรับ n8n
│   │   │   ├── 📁 sse/             # Server-Sent Events
│   │   │   │   └── 📄 route.ts      # สตรีมข้อมูลแบบ real-time
│   │   │   └── 📁 webhook/         # รับข้อมูลจากภายนอก
│   │   │       └── 📄 route.ts      # Webhook handler
│   │   ├── 📁 reviews/             # หน้าแนะนำคอร์ส (Affiliate)
│   │   │   └── 📄 page.tsx          # หน้าแสดงคอร์สแนะนำ
│   │   ├── 📁 shop/                # หน้าร้านค้า
│   │   │   └── 📄 page.tsx          # หน้าแสดงสินค้าและบริการ
│   │   ├── 🎨 globals.css          # CSS หลักของเว็บไซต์
│   │   ├── 📄 layout.tsx           # เลย์เอาต์หลัก (Header, Footer)
│   │   ├── 📄 page.tsx             # หน้าแรก (Homepage)
│   │   └── 🖼️ favicon.ico          # ไอคอนเว็บไซต์
│   ├── 📁 components/              # ส่วนประกอบ React (UI Components)
│   │   ├── 📄 AboutSection.tsx     # ส่วนเกี่ยวกับตัวผู้พัฒนา
│   │   ├── 📄 AffiliateCard.tsx    # การ์ดแสดงคอร์สแนะนำ
│   │   ├── 📄 ChatWidget.tsx       # วิดเจ็ตแชทบอท (มุมขวาล่าง)
│   │   ├── 📄 ContactSection.tsx   # ส่วนข้อมูลติดต่อ
│   │   ├── 📄 EducationSection.tsx # ส่วนประวัติการศึกษา
│   │   ├── 📄 ExperienceSection.tsx# ส่วนประสบการณ์การทำงาน
│   │   ├── 📄 HeroSection.tsx      # ส่วนหัวหน้าแรก (แนะนำตัว)
│   │   ├── 📄 Navigation.tsx       # แถบนำทางหลัก
│   │   ├── 📄 PaymentModal.tsx     # หน้าต่างชำระเงิน
│   │   ├── 📄 ProductCard.tsx      # การ์ดแสดงสินค้า
│   │   ├── 📄 ProductDetailModal.tsx# หน้าต่างรายละเอียดสินค้า
│   │   ├── 📄 ReviewCard.tsx       # การ์ดแสดงรีวิว
│   │   ├── 📄 ReviewForm.tsx       # ฟอร์มเขียนรีวิว
│   │   ├── 📄 SkillsSection.tsx    # ส่วนแสดงทักษะ
│   │   ├── 📄 StarRating.tsx       # คอมโพเนนต์แสดงดาว
│   │   ├── 📄 TestimonialCard.tsx  # การ์ดแสดงคำรับรอง
│   │   └── 📄 ThemeProvider.tsx    # จัดการธีมสี (Light/Dark)
│   ├── 📁 lib/                     # ฟังก์ชันช่วยเหลือ (Utilities)
│   │   ├── 📄 utils.ts             # ฟังก์ชันทั่วไป (clsx, cn)
│   │   └── 📄 webhook-security.ts  # ระบบรักษาความปลอดภัย
│   └── 📁 utils/                   # เครื่องมือช่วยเหลือ
│       └── 📄 analytics.ts         # ฟังก์ชันติดตามการใช้งาน
├── 📁 public/                      # ไฟล์สาธารณะ (Static Files)
│   ├── 🖼️ file.svg                 # ไอคอนไฟล์
│   ├── 🌍 globe.svg                # ไอคอนโลก
│   ├── ⚡ next.svg                 # โลโก้ Next.js
│   ├── 📊 vercel.svg               # โลโก้ Vercel
│   └── 🪟 window.svg               # ไอคอนหน้าต่าง
├── 📦 package.json                 # ข้อมูลโปรเจคและ dependencies
├── 📦 package-lock.json            # ล็อคเวอร์ชัน dependencies
├── ⚙️ next.config.ts              # การตั้งค่า Next.js
├── ⚙️ tsconfig.json               # การตั้งค่า TypeScript
├── ⚙️ postcss.config.mjs          # การตั้งค่า PostCSS
├── ⚙️ eslint.config.mjs           # การตั้งค่า ESLint
├── 📝 next-env.d.ts               # Type definitions สำหรับ Next.js
└── 📖 README.md                   # คู่มือพื้นฐาน

🔍 คำอธิบายโฟลเดอร์สำคัญ:

📁 src/app/ - โฟลเดอร์หลักของ Next.js App Router
- ทุกไฟล์ในนี้จะกลายเป็น route (เส้นทาง URL) อัตโนมัติ
- page.tsx = หน้าเว็บ, layout.tsx = เลย์เอาต์, route.ts = API

📁 src/components/ - ส่วนประกอบ UI ที่ใช้ซ้ำได้
- แต่ละไฟล์เป็น React Component ที่มีหน้าที่เฉพาะ
- ตั้งชื่อแบบ PascalCase (เริ่มต้นด้วยตัวใหญ่)

📁 src/lib/ และ src/utils/ - ฟังก์ชันช่วยเหลือ
- lib = ฟังก์ชันที่ซับซ้อน, utils = ฟังก์ชันง่ายๆ
- ไม่มี UI แต่ช่วยในการประมวลผลข้อมูล

📁 public/ - ไฟล์ที่เข้าถึงได้จากภายนอก
- รูปภาพ, ไอคอน, ไฟล์ PDF ที่ต้องการให้ดาวน์โหลด
- เข้าถึงได้ผ่าน URL โดยตรง เช่น /next.svg

===============================================================================
5. 🌐 การจัดระเบียบหน้าเว็บ
===============================================================================

🏠 หน้าหลัก (/) - src/app/page.tsx

การไหลของหน้าเว็บจากบนลงล่าง:

1️⃣ HeroSection (ส่วนหัวหน้าแรก)
   - รูปโปรไฟล์และชื่อ
   - ตำแหน่งงาน: "AI & Full-Stack Engineer"
   - ข้อความต้อนรับ
   - ปุ่ม Call-to-Action (ติดต่อ, ดูผลงาน)

2️⃣ AboutSection (เกี่ยวกับตัวผู้พัฒนา)
   - เล่าประวัติส่วนตัว
   - ความสนใจและแรงบันดาลใจ
   - วิสัยทัศน์และเป้าหมาย

3️⃣ SkillsSection (ทักษะและความเชี่ยวชาญ)
   - ทักษะด้านการเขียนโปรแกรม
   - เครื่องมือและเทคโนโลยี
   - ระดับความชำนาญ (แสดงเป็นเปอร์เซ็นต์)

4️⃣ ExperienceSection (ประสบการณ์การทำงาน)
   - ประวัติการทำงาน
   - ตำแหน่งและหน้าที่
   - ผลงานที่สำคัญ

5️⃣ EducationSection (ประวัติการศึกษา)
   - วุฒิการศึกษา
   - สถาบันการศึกษา
   - คอร์สเรียนเพิ่มเติม

6️⃣ ContactSection (ข้อมูลติดต่อ)
   - ช่องทางติดต่อต่างๆ
   - ฟอร์มส่งข้อความ
   - ลิงก์โซเชียลมีเดีย

🛒 หน้าร้านค้า (/shop) - src/app/shop/page.tsx

โครงสร้างหน้าร้านค้า:

1️⃣ Hero Section
   - หัวข้อ "ร้านค้าและผลิตภัณฑ์"
   - คำอธิบายสั้นๆ เกี่ยวกับสินค้า

2️⃣ Statistics Section
   - จำนวนผลิตภัณฑ์ทั้งหมด
   - คะแนนเฉลี่ย
   - จำนวนนักเรียน
   - ความพึงพอใจ

3️⃣ Filter Section
   - กรองตามหมวดหมู่: ทั้งหมด, คอร์ส, ที่ปรึกษา, เครื่องมือ, พาร์ทเนอร์
   - เรียงลำดับ: แนะนำ, ราคา, คะแนน, ยอดนิยม

4️⃣ Products Grid
   - แสดงสินค้าเป็นการ์ด
   - รูปภาพ, ชื่อ, ราคา, คะแนน
   - ปุ่มดูรายละเอียดและซื้อ

5️⃣ Modals (หน้าต่างป๊อปอัพ)
   - ProductDetailModal: รายละเอียดสินค้า
   - PaymentModal: ชำระเงิน

ประเภทสินค้า:
- 📚 Course: คอร์สเรียนออนไลน์
- 💼 Consulting: บริการที่ปรึกษา
- 🛠️ Tool: เครื่องมือฟรี
- 🤝 Affiliate: คอร์สจากแพลตฟอร์มอื่น

⭐ หน้าแนะนำคอร์ส (/reviews) - src/app/reviews/page.tsx

โครงสร้างหน้าแนะนำคอร์ส:

1️⃣ Header Section
   - หัวข้อ "คอร์สแนะนำ"
   - คำอธิบายเกี่ยวกับคอร์สคุณภาพ

2️⃣ Affiliate Cards Grid
   - แสดงคอร์สจากแพลตฟอร์มต่างๆ
   - Udemy, Coursera, Pluralsight, LinkedIn Learning
   - ข้อมูลราคา, ส่วนลด, รีวิว
   - ลิงก์ไปยังแพลตฟอร์มต้นทาง

ข้อมูลในแต่ละการ์ด:
- ชื่อคอร์ส (ไทย/อังกฤษ)
- ผู้สอน
- ราคาเดิมและราคาลด
- คะแนนและจำนวนนักเรียน
- ระยะเวลาเรียน
- จุดเด่นของคอร์ส
- ป้ายแสดงสถานะ (ขายดี, ฟรี, ลดราคา)

===============================================================================
4. 🔌 เอกสาร API และการดึงข้อมูล
===============================================================================

API Endpoints ที่มีในโปรเจค:

📊 /api/analytics - ติดตามการใช้งาน
- POST: บันทึกการคลิกปุ่มและพฤติกรรมผู้ใช้
- ใช้สำหรับวิเคราะห์การใช้งานเว็บไซต์

💬 /api/chat - ระบบแชทบอท
- POST: ส่งข้อความและรับคำตอบจากบอท
- เชื่อมต่อกับ n8n workflow สำหรับประมวลผล

🔄 /api/n8n-response - รับการตอบสนองจาก n8n
- POST: รับข้อมูลที่ประมวลผลแล้วจาก n8n
- ใช้สำหรับการตอบกลับแชทบอท

📡 /api/sse - Server-Sent Events
- GET: สตรีมข้อมูลแบบ real-time
- ใช้สำหรับการอัพเดทข้อมูลแบบทันที

🪝 /api/webhook - รับข้อมูลจากภายนอก
- POST: รับข้อมูลจากระบบภายนอก
- มีระบบรักษาความปลอดภัยด้วย signature verification

===============================================================================
5. 📄 ประเภทไฟล์และหน้าที่
===============================================================================

🔧 ไฟล์ TypeScript (.ts, .tsx)
- .tsx: ไฟล์ React Component ที่มี JSX
- .ts: ไฟล์ TypeScript ธรรมดา (ฟังก์ชัน, type definitions)
- ให้ type safety และ IntelliSense ที่ดีกว่า JavaScript

🎨 ไฟล์ CSS (.css)
- globals.css: สไตล์หลักของเว็บไซต์
- ใช้ Tailwind CSS เป็นหลัก
- มีการปรับแต่งสำหรับฟอนต์ไทยและ dark mode

📦 ไฟล์ JSON (.json)
- package.json: ข้อมูลโปรเจคและ dependencies
- tsconfig.json: การตั้งค่า TypeScript compiler
- next-env.d.ts: type definitions สำหรับ Next.js

⚙️ ไฟล์การตั้งค่า (.mjs, .ts)
- next.config.ts: การตั้งค่า Next.js
- postcss.config.mjs: การตั้งค่า PostCSS
- eslint.config.mjs: การตั้งค่า code linting

===============================================================================
6. 🧩 โครงสร้าง React Components
===============================================================================

📐 การจัดระเบียบ Components:

🏠 Layout Components (เลย์เอาต์)
- Navigation.tsx: แถบนำทางหลัก
- layout.tsx: เลย์เอาต์หน้าเว็บ

📄 Section Components (ส่วนต่างๆ ในหน้า)
- HeroSection.tsx: ส่วนหัวหน้าแรก
- AboutSection.tsx: ส่วนเกี่ยวกับ
- SkillsSection.tsx: ส่วนทักษะ
- ExperienceSection.tsx: ส่วนประสบการณ์
- EducationSection.tsx: ส่วนการศึกษา
- ContactSection.tsx: ส่วนติดต่อ

🛍️ Shop Components (ร้านค้า)
- ProductCard.tsx: การ์ดแสดงสินค้า
- ProductDetailModal.tsx: หน้าต่างรายละเอียดสินค้า
- PaymentModal.tsx: หน้าต่างชำระเงิน
- AffiliateCard.tsx: การ์ดแสดงคอร์สแนะนำ

🔧 Utility Components (เครื่องมือ)
- StarRating.tsx: แสดงคะแนนดาว
- ChatWidget.tsx: วิดเจ็ตแชท
- ThemeProvider.tsx: จัดการธีมสี

💡 หลักการทำงาน:
- แต่ละ Component มีหน้าที่เฉพาะ
- ใช้ Props สำหรับส่งข้อมูลระหว่าง Components
- ใช้ State สำหรับจัดการข้อมูลที่เปลี่ยนแปลง
- ใช้ Framer Motion สำหรับ Animation

===============================================================================
7. 🧭 ระบบการนำทาง (Routing)
===============================================================================

Next.js App Router ใช้ระบบ file-based routing:

📁 โครงสร้าง Routes:
- / → src/app/page.tsx (หน้าแรก)
- /shop → src/app/shop/page.tsx (ร้านค้า)
- /reviews → src/app/reviews/page.tsx (แนะนำคอร์ส)
- /api/* → src/app/api/*/route.ts (API endpoints)

🔗 การนำทางภายในเว็บ:
- ใช้ Next.js Link component สำหรับการนำทางที่รวดเร็ว
- Navigation.tsx จัดการแถบเมนูหลัก
- รองรับ smooth scrolling สำหรับการเลื่อนหน้า

📱 Responsive Navigation:
- แสดงเมนูแบบ hamburger บนมือถือ
- ปรับขนาดและตำแหน่งตามหน้าจอ

===============================================================================
8. 🎨 วิธีการจัดการ CSS/Styling
===============================================================================

🌈 Tailwind CSS Framework:
- ใช้ utility classes สำหรับการจัดสไตล์
- ตัวอย่าง: "bg-blue-500 text-white p-4 rounded-lg"
- ประหยัดเวลาและทำให้โค้ดสั้นลง

🌙 Dark Mode Support:
- ใช้ CSS variables สำหรับสีหลัก
- รองรับการเปลี่ยนธีมอัตโนมัติตาม system preference
- คลาส "dark:" สำหรับสไตล์ในโหมดมืด

🇹🇭 การรองรับภาษาไทย:
- ใช้ฟอนต์ Noto Sans Thai สำหรับข้อความไทย
- คลาส "thai-text" สำหรับปรับ line-height และ letter-spacing
- การจัดระยะห่างที่เหมาะสมสำหรับข้อความไทย

✨ Animations:
- ใช้ Framer Motion สำหรับ animation ที่ซับซอน
- CSS animations สำหรับ effects พื้นฐาน
- Smooth transitions สำหรับการเปลี่ยนสี

===============================================================================
9. ⚙️ ไฟล์การตั้งค่า (Configuration Files)
===============================================================================

📦 package.json - ข้อมูลโปรเจค
- name: "boom-portfolio"
- dependencies: ไลบรารีที่ใช้ในโปรเจค
- scripts: คำสั่งสำหรับรันโปรเจค
  - "dev": รันเซิร์ฟเวอร์พัฒนา
  - "build": สร้างไฟล์สำหรับ production
  - "start": รันเซิร์ฟเวอร์ production
  - "lint": ตรวจสอบโค้ด

⚡ next.config.ts - การตั้งค่า Next.js
- การตั้งค่าการโหลดรูปภาพจากภายนอก
- การปรับแต่งการทำงานของ Next.js

📝 tsconfig.json - การตั้งค่า TypeScript
- target: ES2017 (เวอร์ชัน JavaScript ที่จะ compile)
- paths: การตั้งค่า path alias (@/* → ./src/*)
- strict: เปิดใช้ strict mode สำหรับ type checking

🎨 postcss.config.mjs - การตั้งค่า CSS
- การตั้งค่า Tailwind CSS
- การประมวลผล CSS

🔍 eslint.config.mjs - การตั้งค่า Code Quality
- กฎการเขียนโค้ดที่ดี
- การตรวจสอบ syntax และ best practices

===============================================================================
10. 🚀 คู่มือเริ่มต้นสำหรับผู้เริ่มต้น
===============================================================================

📋 ขั้นตอนการเริ่มต้น:

1️⃣ ติดตั้ง Dependencies
```
npm install
```

2️⃣ รันเซิร์ฟเวอร์พัฒนา
```
npm run dev
```

3️⃣ เปิดเบราว์เซอร์ไปที่
```
http://localhost:3000
```

🔧 การแก้ไขโค้ด:

📄 แก้ไขเนื้อหาหน้าแรก:
- ไปที่ src/app/page.tsx
- แก้ไข Components ต่างๆ ใน src/components/

🛍️ แก้ไขสินค้าในร้านค้า:
- ไปที่ src/app/shop/page.tsx
- แก้ไขอาร์เรย์ "products" ในไฟล์

🎨 แก้ไขสี/สไตล์:
- ไปที่ src/app/globals.css
- ใช้ Tailwind classes ในไฟล์ .tsx

💡 เคล็ดลับสำหรับผู้เริ่มต้น:

🔍 การหาไฟล์:
- ใช้ Ctrl+P (Windows) หรือ Cmd+P (Mac) ใน VS Code
- พิมพ์ชื่อไฟล์เพื่อค้นหาอย่างรวดเร็ว

📚 การเรียนรู้เพิ่มเติม:
- Next.js Documentation: https://nextjs.org/docs
- React Documentation: https://react.dev
- Tailwind CSS: https://tailwindcss.com/docs
- TypeScript: https://www.typescriptlang.org/docs

🐛 การแก้ไขปัญหา:
- ดู Console ในเบราว์เซอร์ (F12)
- ดู Terminal ที่รัน npm run dev
- ลองรีสตาร์ทเซิร์ฟเวอร์ (Ctrl+C แล้ว npm run dev ใหม่)

===============================================================================
13. ✏️ การแก้ไขและปรับแต่งเนื้อหา
===============================================================================

🎯 การแก้ไขเนื้อหาพื้นฐาน:

📝 แก้ไขข้อมูลส่วนตัว:

1️⃣ แก้ไขชื่อและตำแหน่ง:
   - ไฟล์: src/app/layout.tsx
   - หา: title: "(BoomBigNose) - AI & Full-Stack Engineer"
   - แก้เป็น: title: "ชื่อคุณ - ตำแหน่งของคุณ"

2️⃣ แก้ไขข้อมูลใน HeroSection:
   - ไฟล์: src/components/HeroSection.tsx
   - แก้ไขชื่อ, ตำแหน่ง, คำอธิบาย
   - เปลี่ยนรูปโปรไฟล์

3️⃣ แก้ไขข้อมูลใน AboutSection:
   - ไฟล์: src/components/AboutSection.tsx
   - เขียนเรื่องราวของคุณเอง
   - แก้ไขความสนใจและเป้าหมาย

🛍️ การแก้ไขสินค้าในร้านค้า:

1️⃣ เพิ่ม/ลบ/แก้ไขสินค้า:
   - ไฟล์: src/app/shop/page.tsx
   - หาอาร์เรย์ "products" (บรรทัดที่ 12)
   - แก้ไขข้อมูลสินค้า:

```javascript
{
  id: "1",                          // ID เฉพาะ
  title: "ชื่อสินค้าภาษาอังกฤษ",
  titleTh: "ชื่อสินค้าภาษาไทย",
  description: "คำอธิบายภาษาอังกฤษ",
  descriptionTh: "คำอธิบายภาษาไทย",
  price: 2990,                      // ราคา
  originalPrice: 4990,              // ราคาเดิม (ถ้ามี)
  currency: "THB",                  // สกุลเงิน
  images: ["URL รูปภาพ"],
  type: "course",                   // ประเภท: course, consulting, tool, affiliate
  rating: 4.8,                      // คะแนน
  reviewCount: 127,                 // จำนวนรีวิว
  duration: "12 ชั่วโมง",
  students: 1250,                   // จำนวนนักเรียน
  link: "#",                        // ลิงก์
  isExternal: false,                // ลิงก์ภายนอกหรือไม่
  badge: "Best Seller",             // ป้าย
  badgeTh: "ขายดี"
}
```

2️⃣ เพิ่มรีวิวสินค้า:
   - ในแต่ละสินค้า เพิ่ม array "reviews"
   - ตัวอย่าง:

```javascript
reviews: [
  {
    id: "r1",
    name: "ชื่อผู้รีวิว",
    rating: 5,
    comment: "ความคิดเห็น",
    date: "2024-01-15",
    verified: true
  }
]
```

⭐ การแก้ไขคอร์สแนะนำ:

1️⃣ แก้ไขคอร์สใน Affiliate:
   - ไฟล์: src/app/reviews/page.tsx
   - หาอาร์เรย์ "affiliatePromotions" (บรรทัดที่ 9)
   - แก้ไขข้อมูลคอร์ส:

```javascript
{
  id: "1",
  title: "ชื่อคอร์สภาษาอังกฤษ",
  titleTh: "ชื่อคอร์สภาษาไทย",
  description: "คำอธิบายสั้น",
  descriptionTh: "คำอธิบายภาษาไทย",
  originalPrice: 3199,
  salePrice: 599,
  currency: "THB",
  discount: "81%",
  rating: 4.6,
  students: 1500000,
  instructor: "ชื่อผู้สอน",
  duration: "22 ชั่วโมง",
  image: "URL รูปภาพ",
  affiliateLink: "ลิงก์ affiliate",
  category: "Programming",
  categoryTh: "โปรแกรมมิ่ง",
  highlights: [
    "จุดเด่นที่ 1",
    "จุดเด่นที่ 2"
  ],
  badge: "Best Seller",
  badgeTh: "ขายดี"
}
```

🎨 การแก้ไขสีและธีม:

1️⃣ แก้ไขสีหลัก:
   - ไฟล์: src/app/globals.css
   - แก้ไข CSS variables:

```css
:root {
  --background: #ffffff;    /* สีพื้นหลัง */
  --foreground: #000000;    /* สีข้อความ */
}
```

2️⃣ แก้ไขสี Tailwind:
   - ใช้คลาส Tailwind ในไฟล์ .tsx
   - ตัวอย่าง: bg-blue-500, text-red-600, border-gray-300

===============================================================================
14. 🚀 การเพิ่มฟีเจอร์ใหม่
===============================================================================

🆕 การเพิ่มหน้าใหม่:

1️⃣ สร้างหน้าใหม่:
   - สร้างโฟลเดอร์ใหม่ใน src/app/
   - ตัวอย่าง: src/app/blog/
   - สร้างไฟล์ page.tsx ในโฟลเดอร์นั้น

2️⃣ โครงสร้างไฟล์ page.tsx:

```typescript
export default function BlogPage() {
  return (
    <div className="pt-16 min-h-screen">
      <h1>หน้าบล็อก</h1>
      <p>เนื้อหาของหน้า</p>
    </div>
  );
}
```

3️⃣ เพิ่มลิงก์ในเมนู:
   - ไฟล์: src/components/Navigation.tsx
   - เพิ่มลิงก์ใหม่ในอาร์เรย์ navigation

🧩 การสร้าง Component ใหม่:

1️⃣ สร้างไฟล์ Component ใหม่:
   - สร้างไฟล์ใน src/components/
   - ตั้งชื่อแบบ PascalCase เช่น MyNewComponent.tsx

2️⃣ โครงสร้าง Component พื้นฐาน:

```typescript
interface MyNewComponentProps {
  title: string;
  description?: string;
}

export function MyNewComponent({ title, description }: MyNewComponentProps) {
  return (
    <div className="p-4 bg-white rounded-lg">
      <h2 className="text-xl font-bold">{title}</h2>
      {description && <p className="text-gray-600">{description}</p>}
    </div>
  );
}
```

3️⃣ การใช้งาน Component:

```typescript
import { MyNewComponent } from "@/components/MyNewComponent";

// ใช้งานใน JSX
<MyNewComponent title="หัวข้อ" description="คำอธิบาย" />
```

🔌 การเพิ่ม API ใหม่:

1️⃣ สร้าง API Route ใหม่:
   - สร้างโฟลเดอร์ใน src/app/api/
   - สร้างไฟล์ route.ts

2️⃣ โครงสร้าง API Route:

```typescript
import { NextRequest, NextResponse } from 'next/server';

export async function GET(request: NextRequest) {
  try {
    // ประมวลผลข้อมูล
    const data = { message: "สำเร็จ" };

    return NextResponse.json(data);
  } catch (error) {
    return NextResponse.json(
      { error: "เกิดข้อผิดพลาด" },
      { status: 500 }
    );
  }
}

export async function POST(request: NextRequest) {
  try {
    const body = await request.json();

    // ประมวลผลข้อมูลที่ส่งมา

    return NextResponse.json({ success: true });
  } catch (error) {
    return NextResponse.json(
      { error: "เกิดข้อผิดพลาด" },
      { status: 500 }
    );
  }
}
```

📦 การเพิ่ม Package ใหม่:

1️⃣ ติดตั้ง Package:
```bash
npm install package-name
npm install --save-dev @types/package-name  # สำหรับ TypeScript types
```

2️⃣ Import และใช้งาน:
```typescript
import { SomeFunction } from 'package-name';

// ใช้งานใน Component
const result = SomeFunction();
```

===============================================================================
15. 🔧 การแก้ไขปัญหาที่พบบ่อย
===============================================================================

❌ ปัญหาที่พบบ่อยและวิธีแก้ไข:

1️⃣ เซิร์ฟเวอร์ไม่เริ่มต้น:

ปัญหา: npm run dev ไม่ทำงาน
วิธีแก้:
```bash
# ลบ node_modules และติดตั้งใหม่
rm -rf node_modules
rm package-lock.json
npm install

# หรือใช้ yarn
rm -rf node_modules
rm yarn.lock
yarn install
```

2️⃣ Port 3000 ถูกใช้งานแล้ว:

ปัญหา: Error: Port 3000 is already in use
วิธีแก้:
```bash
# หา process ที่ใช้ port 3000
lsof -ti:3000

# ฆ่า process
kill -9 $(lsof -ti:3000)

# หรือใช้ port อื่น
npm run dev -- -p 3001
```

3️⃣ TypeScript Error:

ปัญหา: Type errors ต่างๆ
วิธีแก้:
- ตรวจสอบการ import
- ตรวจสอบ type definitions
- ใช้ "any" type ชั่วคราว (ไม่แนะนำ)

```typescript
// แทนที่จะใช้
const data: SomeType = getData();

// ใช้ชั่วคราว
const data: any = getData();
```

4️⃣ CSS ไม่แสดงผล:

ปัญหา: Tailwind CSS ไม่ทำงาน
วิธีแก้:
- ตรวจสอบ globals.css ถูก import ใน layout.tsx
- ตรวจสอบ tailwind.config.js
- รีสตาร์ทเซิร์ฟเวอร์

5️⃣ Image ไม่แสดง:

ปัญหา: รูปภาพไม่โหลด
วิธีแก้:
- ตรวจสอบ path ของรูปภาพ
- ตรวจสอบ next.config.ts สำหรับ external images
- ใช้ Next.js Image component

```typescript
import Image from 'next/image';

<Image
  src="/path/to/image.jpg"
  alt="คำอธิบาย"
  width={500}
  height={300}
/>
```

6️⃣ API ไม่ทำงาน:

ปัญหา: API calls ล้มเหลว
วิธีแก้:
- ตรวจสอบ URL ของ API
- ตรวจสอบ CORS settings
- ดู Network tab ใน Developer Tools

🛠️ เครื่องมือ Debug:

1️⃣ Browser Developer Tools:
- กด F12 เพื่อเปิด
- Console tab: ดู JavaScript errors
- Network tab: ดู API calls
- Elements tab: ตรวจสอบ HTML/CSS

2️⃣ VS Code Debugging:
- ใส่ breakpoint ในโค้ด
- กด F5 เพื่อเริ่ม debug
- ดูค่าตัวแปรแบบ real-time

3️⃣ Console.log:
```typescript
// เพิ่มใน code เพื่อดูค่า
console.log('ค่าตัวแปร:', variable);
console.error('Error:', error);
```

===============================================================================
16. 📚 คำศัพท์และความหมาย
===============================================================================

🔤 คำศัพท์สำคัญ:

⚛️ React & Next.js:
- Component: ส่วนประกอบ UI ที่ใช้ซ้ำได้
- Props: ข้อมูลที่ส่งระหว่าง Components
- State: ข้อมูลที่เปลี่ยนแปลงได้ใน Component
- Hook: ฟังก์ชันพิเศษของ React (useState, useEffect)
- JSX: การเขียน HTML ใน JavaScript
- SSR: Server-Side Rendering
- CSR: Client-Side Rendering
- App Router: ระบบ routing ใหม่ของ Next.js

💻 การพัฒนาเว็บ:
- Frontend: ส่วนหน้าบ้าน (UI ที่ผู้ใช้เห็น)
- Backend: ส่วนหลังบ้าน (เซิร์ฟเวอร์, ฐานข้อมูล)
- API: Application Programming Interface
- Endpoint: จุดเชื่อมต่อ API
- Route: เส้นทาง URL
- Middleware: ตัวกลางประมวลผล
- Webhook: การรับข้อมูลจากภายนอก

🎨 CSS & Styling:
- Tailwind CSS: CSS Framework แบบ utility-first
- Responsive: ปรับตัวตามขนาดหน้าจอ
- Mobile-first: ออกแบบสำหรับมือถือก่อน
- Dark Mode: โหมดสีมืด
- CSS Variables: ตัวแปร CSS
- Flexbox: การจัดวาง CSS แบบยืดหยุ่น
- Grid: การจัดวาง CSS แบบตาราง

🔧 เครื่องมือ:
- npm: Node Package Manager
- Git: Version Control System
- VS Code: Text Editor
- Terminal: Command Line Interface
- Browser DevTools: เครื่องมือ debug ในเบราว์เซอร์
- Hot Reload: การอัพเดทโค้ดแบบทันที

📦 Package & Dependencies:
- Package: ไลบรารีหรือเครื่องมือ
- Dependencies: Package ที่จำเป็นสำหรับการทำงาน
- DevDependencies: Package สำหรับการพัฒนาเท่านั้น
- node_modules: โฟลเดอร์เก็บ packages
- package.json: ไฟล์ข้อมูลโปรเจค
- package-lock.json: ล็อคเวอร์ชัน packages

🌐 เว็บเทคโนโลยี:
- HTML: HyperText Markup Language
- CSS: Cascading Style Sheets
- JavaScript: ภาษาโปรแกรมสำหรับเว็บ
- TypeScript: JavaScript + Type Safety
- JSON: JavaScript Object Notation
- HTTP: HyperText Transfer Protocol
- HTTPS: HTTP Secure

===============================================================================
17. 🎓 แหล่งเรียนรู้เพิ่มเติม
===============================================================================

📖 เอกสารอย่างเป็นทางการ:

🌐 Next.js:
- เอกสาร: https://nextjs.org/docs
- Learn Next.js: https://nextjs.org/learn
- Examples: https://github.com/vercel/next.js/tree/canary/examples

⚛️ React:
- เอกสาร: https://react.dev
- Tutorial: https://react.dev/learn
- API Reference: https://react.dev/reference/react

🎨 Tailwind CSS:
- เอกสาร: https://tailwindcss.com/docs
- Components: https://tailwindui.com
- Playground: https://play.tailwindcss.com

📘 TypeScript:
- เอกสาร: https://www.typescriptlang.org/docs
- Handbook: https://www.typescriptlang.org/docs/handbook/intro.html

🎥 คอร์สเรียนแนะนำ:

🇹🇭 ภาษาไทย:
- YouTube: "React สำหรับคนไทย"
- YouTube: "Next.js เบื้องต้น"
- Udemy: คอร์ส React/Next.js ภาษาไทย

🇺🇸 ภาษาอังกฤษ:
- freeCodeCamp: React Course
- Vercel: Next.js Course
- Scrimba: React Bootcamp
- Egghead.io: Advanced React

📚 หนังสือแนะนำ:
- "Learning React" by Alex Banks & Eve Porcello
- "Next.js in Action" by Misko Hevery
- "You Don't Know JS" series

🛠️ เครื่องมือและ Resources:

🔧 Development Tools:
- VS Code Extensions
- React Developer Tools (Browser Extension)
- Redux DevTools
- Postman (API Testing)

🎨 Design Resources:
- Figma: UI/UX Design
- Unsplash: Free Images
- Heroicons: Free Icons
- Google Fonts: Web Fonts

📱 Community และ Support:
- Stack Overflow: Q&A
- GitHub Discussions
- Discord: Next.js Community
- Reddit: r/reactjs, r/nextjs

💡 เคล็ดลับการเรียนรู้:

1️⃣ เริ่มจากพื้นฐาน:
- เรียน HTML, CSS, JavaScript ก่อน
- ทำความเข้าใจ React concepts
- ค่อยๆ เรียน Next.js

2️⃣ ฝึกปฏิบัติ:
- สร้างโปรเจคเล็กๆ
- Clone เว็บไซต์ที่ชอบ
- ทำตาม tutorial

3️⃣ อ่านโค้ดคนอื่น:
- ดู GitHub repositories
- เรียนรู้จาก open source projects
- ศึกษา best practices

4️⃣ สร้าง Portfolio:
- แสดงผลงานที่ทำ
- เขียนบล็อกเกี่ยวกับการเรียนรู้
- แชร์ความรู้กับคนอื่น

===============================================================================
📞 ติดต่อและสนับสนุน
===============================================================================

หากมีคำถามหรือต้องการความช่วยเหลือ:
- GitHub: https://github.com/Boom-Vitt
- Email: vittawat.soo@gmail.com

🎉 ขอให้สนุกกับการพัฒนา!
💪 อย่าลืมฝึกฝนอย่างสม่ำเสมอ!
🚀 สร้างสรรค์สิ่งใหม่ๆ ให้โลกได้เห็น!

===============================================================================
📝 บันทึกเพิ่มเติม
===============================================================================

📅 เวอร์ชันและการอัพเดท:
- เวอร์ชันปัจจุบัน: 1.0
- วันที่สร้าง: 2024
- การอัพเดทล่าสุด: ตามการเปลี่ยนแปลงของโปรเจค

🔄 การบำรุงรักษา:
- ตรวจสอบ dependencies อย่างสม่ำเสมอ
- อัพเดท packages เมื่อมีเวอร์ชันใหม่
- ทดสอบการทำงานหลังการอัพเดท

💾 การสำรองข้อมูล:
- ใช้ Git สำหรับ version control
- สำรองโค้ดบน GitHub
- สำรองไฟล์สำคัญเป็นระยะ

🔐 ความปลอดภัย:
- ไม่เผยแพร่ API keys
- ใช้ environment variables
- ตรวจสอบ dependencies vulnerabilities

📈 การพัฒนาต่อ:
- เพิ่มฟีเจอร์ใหม่ตามความต้องการ
- ปรับปรุง UI/UX
- เพิ่มประสิทธิภาพ

===============================================================================
🎯 สรุป
===============================================================================

คู่มือนี้ครอบคลุม:
✅ การติดตั้งและเตรียมความพร้อม
✅ โครงสร้างโปรเจคแบบละเอียด
✅ การแก้ไขและปรับแต่งเนื้อหา
✅ การเพิ่มฟีเจอร์ใหม่
✅ การแก้ไขปัญหา
✅ คำศัพท์และแหล่งเรียนรู้

หวังว่าคู่มือนี้จะช่วยให้คุณเข้าใจและพัฒนาโปรเจค Portfolio ได้อย่างมีประสิทธิภาพ!

🌟 ขอให้โชคดีในการเรียนรู้และพัฒนา! 🌟
